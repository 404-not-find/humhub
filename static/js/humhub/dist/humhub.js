!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r={},i=[],o=[],u=[],c=function(e,t){var n=f(e,t);return n||console.error("No module found for namespace: "+e),n},f=function(e,t){try{var n=d(e),i=r;return $.each(n.split("."),function(e,n){if(n in i)i=i[n];else{if(!t)return i=void 0,!1;i=i[n]={}}}),i}catch(t){(c("log")||console).error("Error while resolving namespace: "+e,t)}},l=function(e,t){try{var n,i,o=d(e),u=r;$.each(o.split("."),function(e,t){if(!(t in u))return!1;i=t,n=u,u=u[t]}),n[i]=t}catch(t){(c("log")||console).error("Error while setting namespace: "+e,t)}},a=r.config={id:"config",get:function(e,t,n){if(1===arguments.length)return this.module(e);if(g(t)){var r=this.module(e)[t];return g(r)?r:n}},module:function(e){return e=e.id?e.id:e,this[e=d(e)]||(this[e]={}),this[e]},is:function(e,t,n){return!0===this.get(e,t,n)},set:function(e,t,n){if(1===arguments.length){var r=this;$.each(e,function(e,t){r.set(e,t)})}else 2===arguments.length?$.extend(this.module(e),t):3===arguments.length&&(this.module(e)[t]=n)}},s=r.event={events:$({}),off:function(e,t,n){return this.events.off(e,t,n),this},on:function(e,t,n,r){return this.events.on(e,t,n,r),this},trigger:function(e,t){return this.events.trigger(e,t),this},one:function(e,t,n,r){return this.events.one(e,t,n,r),this},sub:function(e){e.events=$({}),e.on=$.proxy(s.on,e),e.one=$.proxy(s.one,e),e.off=$.proxy(s.off,e),e.trigger=$.proxy(s.trigger,e),e.triggerCondition=$.proxy(s.triggerCondition,e)},triggerCondition:function(e,t,n){var r;switch(arguments.length){case 1:r=this.events,t=e;break;case 2:$.isArray(t)?(r=this.events,n=t):r=$(e);break;default:r=$(e)}if(!t)return!1;var i=$.Event(t);return r.trigger(i),i.isDefaultPrevented()}},d=function(e){return h(h(e,"humhub."),"modules.")},h=function(e,t){return p(e,t)?e.substring(t.length,e.length):e},p=function(e,t){return!(!e||!t)&&0===e.indexOf(t)},g=function(e){return void 0!==e},v=function(e,t){t=t||c("log"),e.log=t.module(e)};$(function(){var e=c("log");$.each(i,function(t,n){v(n,e)}),$.each(o,function(e,t){y(t)}),b.initialized=!0,s.trigger("humhub:ready"),$(document).trigger("humhub:ready",[!1,b])});var y=function(e){var t=c("log");if(s.trigger("humhub:beforeInitModule",e),e.init)try{s.trigger(e.id.replace(".",":")+":beforeInit",e),s.trigger(e.id.replace(/\./g,":")+":beforeInit",e),e.init(),s.trigger(e.id.replace(/\./g,":")+":afterInit",e),s.trigger(e.id.replace(".",":")+":afterInit",e)}catch(n){t.error("Could not initialize module: "+e.id,n)}s.trigger("humhub:afterInitModule",e),t.debug("Module initialized: "+e.id)},m=[];s.on("humhub:modules:client:pjax:success",function(e){$.each(u,function(e,t){t.initOnPjaxLoad&&m.indexOf(t.id)>-1&&t.init(!0)}),s.trigger("humhub:ready"),$(document).trigger("humhub:ready",[!0,b])}).on("humhub:modules:client:pjax:beforeSend",function(e){m=[],$.each(i,function(e,t){t.unload&&t.unload(),m.push(t.id)})});var x=function(){Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e,t){if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),r=n.length>>>0;if(0===r)return!1;var i,o,u=0|t,c=Math.max(u>=0?u:r-Math.abs(u),0);for(;c<r;){if((i=n[c])===(o=e)||"number"==typeof i&&"number"==typeof o&&isNaN(i)&&isNaN(o))return!0;c++}return!1}})};(function(){"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),r=1;r<arguments.length;r++){var i=arguments[r];if(null!=i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])}return n},writable:!0,configurable:!0})})(),x();var b={module:function(e,t){var n=f(e,!0);if(!n.id){n.id="humhub.modules."+d(e),n.require=c,n.initOnPjaxLoad=!1,n.config=c("config").module(n),n.isModule=!0,n.text=function(e){var t=n.config.text;return t?t[e]:void 0};var r=n.export=function(e){$.extend(n,e)};try{t(n,c,$),r!==n.export&&l(n.id,n.export)}catch(t){console.error("Error while creating module: "+e,t)}return i.push(n),n.init&&n.initOnPjaxLoad&&u.push(n),b.initialized?(v(n),y(n)):o.push(n),n}},modules:r,config:a,event:s,require:c},O=b,j={isFunction:function(e){return $.isFunction(e)},isObject:function(e){return $.isPlainObject(e)},isJQuery:function(e){return this.isDefined(e)&&e.jquery},isArray:function(e){return $.isArray(e)},isEmpty:function(e){return!e||(j.isArray(e)?e.length<=0:$.isEmptyObject(e))},isString:function(e){return"string"==typeof e},isNumber:function(e){return this.isDefined(e)&&!isNaN(parseFloat(e))&&isFinite(e)},isBoolean:function(e){return"boolean"==typeof e},defaultValue:function(e,t){return j.isDefined(e)?e:t},resolve:function(e,t,n){var r=e;return $.each(t.split("."),function(e,t){if(t in r)r=r[t];else{if(!n)return r=void 0,!1;r=r[t]={}}}),r},swap:function(e){var t={};for(var n in e)t[e[n]]=n;return t},isDefined:function(e){if(arguments.length>1){var t=this;return this.each(arguments,function(e,n){if(!t.isDefined(n))return!1}),!0}return void 0!==e},chain:function(e){var t=[];return Array.prototype.push.apply(t,arguments),t.shift(),function(){var n=arguments;t.forEach(function(t){t.apply(e,n)})}},debounce:function(e,t,n){var r;return function(){var i=this,o=arguments,u=n&&!r;clearTimeout(r),r=setTimeout(function(){r=null,n||e.apply(i,o)},t),u&&e.apply(i,o)}},inherits:function(e,t,n){for(var r in t)(!n||!n.excludeFields||n.excludeFields.indexOf(r)<0)&&(e[r]=t[r]);e.prototype=Object.create(t.prototype),e._super=t.prototype,e._superConst=t,e.prototype.static=function(t){var n,r=e[t];return j.isFunction(r)?(arguments.length>1&&(n=[],Array.prototype.push.apply(n,arguments),n.shift()),r.apply(this,n)):r},e.prototype.super=function(){if(!e._super[arguments[0]])throw new Error("Call of undefined method of super type: "+arguments[0]);var t;return arguments.length>1&&(t=[],Array.prototype.push.apply(t,arguments),t.shift()),e._super[arguments[0]].apply(this,t)}},extendable:function(e){j.isFunction(e)&&(e={init:e});var t=e.init||function(){};if(e.name)try{Object.defineProperty(t,"name",{value:e.name})}catch(e){console.warn("Could not overwrite extendable name property",e)}return t.extend=function(e,n){j.isString(e)&&(n=e,e=void 0),e=e||function(){t.apply(this,arguments)};var r=j.extendable({init:e,name:n});return j.inherits(r,t,{excludeFields:["extend"]}),r},t}},w={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},P={escapeHtml:function(e){return String(e).replace(/[&<>"'`=\/]/g,function(e){return w[e]})},capitalize:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},cutPrefix:function(e,t){return this.startsWith(e,t)?e.substring(t.length,e.length):e},cutSuffix:function(e,t){return e.slice(0,-1*t.length)},startsWith:function(e,t){return!(!j.isDefined(e)||!j.isDefined(t))&&0===e.indexOf(t)},endsWith:function(e,t){return!(!j.isDefined(e)||!j.isDefined(t))&&-1!==e.indexOf(t,e.length-t.length)},capitalizeFirstLetter:function(e){return e&&e.length?e.charAt(0).toUpperCase()+e.slice(1):e},lowerCaseFirstLetter:function(e){return e&&e.length?e.charAt(0).toLowerCase()+e.slice(1):e},htmlEncode:function(e){return $("<div/>").text(e).html()},encode:function(e){return $("<div/>").text(e).html()},htmlDecode:function(e){return $("<div/>").html(e).text()},decode:function(e){return $("<div/>").html(e).text()},template:function(e,t){return e.replace(/{(.*?)}/g,function(e,n,r,i){var o=j.resolve(t,n);return j.isDefined(o)?o:e})}},D={move:function(e,t,n){for(;t<0;)t+=e.length;for(;n<0;)n+=e.length;if(n>=e.length)for(var r=n-e.length;1+r--;)e.push(void 0);return e.splice(n,0,e.splice(t,1)[0]),e},xxx:function(){console.log("test")}};O.module("util",function(e){e.export({init:function(){},object:j,string:P,array:D})}),setInterval(function(){D.xxx()},3e3),O.event.on("humhub:modules:util:afterInit",function(e,t){console.log("asdf"),t.array.xxx=function(){return console.log("yes")}}),console.log("xxxxxxxx");var A,C="<ul>\n                ".concat((A="",["red","green","blue"].forEach(function(e){A+="<li>".concat(e,"</li>")}),A),"\n                </ul>");console.log(C),window.humhub=O}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2h1bWh1Yi9jb3JlLmpzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9odW1odWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvaHVtaHViL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibW9kdWxlQXJyIiwiaW5pdGlhbE1vZHVsZXMiLCJwamF4SW5pdE1vZHVsZXMiLCJyZXF1aXJlIiwibW9kdWxlTlMiLCJsYXp5IiwicmVzb2x2ZU5hbWVTcGFjZSIsImNvbnNvbGUiLCJlcnJvciIsInR5cGVQYXRoIiwiaW5pdCIsIm1vZHVsZVN1ZmZpeCIsIl9jdXRNb2R1bGVQcmVmaXgiLCJyZXN1bHQiLCIkIiwiZWFjaCIsInNwbGl0Iiwic3ViUGF0aCIsInVuZGVmaW5lZCIsImUiLCJfc2V0TmFtZVNwYWNlIiwicGF0aCIsIm9iaiIsInBhcmVudCIsImxhc3QiLCJjdXJyZW50UGF0aCIsImNvbmZpZyIsImlkIiwiZGVmYXVsdFZhbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInRoaXMiLCJfaXNEZWZpbmVkIiwiaXMiLCJzZXQiLCJ0aGF0IiwibW9kdWxlS2V5IiwiZXh0ZW5kIiwiZXZlbnQiLCJldmVudHMiLCJvZmYiLCJzZWxlY3RvciIsImhhbmRsZXIiLCJvbiIsImRhdGEiLCJ0cmlnZ2VyIiwiZXZlbnRUeXBlIiwiZXh0cmFQYXJhbWV0ZXJzIiwib25lIiwic3ViIiwidGFyZ2V0IiwicHJveHkiLCJ0cmlnZ2VyQ29uZGl0aW9uIiwiJHRhcmdldCIsImlzQXJyYXkiLCJldmVudE9iaiIsIkV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX2N1dFByZWZpeCIsInByZWZpeCIsIl9zdGFydHNXaXRoIiwic3Vic3RyaW5nIiwidmFsIiwiaW5kZXhPZiIsImFkZE1vZHVsZUxvZ2dlciIsImxvZyIsImluaXRNb2R1bGUiLCJodW1odWIiLCJpbml0aWFsaXplZCIsImRvY3VtZW50IiwicmVwbGFjZSIsImVyciIsImRlYnVnIiwidW5sb2FkZWQiLCJldnQiLCJpbml0T25QamF4TG9hZCIsInVubG9hZCIsInB1c2giLCJhcnJheUluY2x1ZGVzUG9seWZpbGwiLCJBcnJheSIsImluY2x1ZGVzIiwic2VhcmNoRWxlbWVudCIsImZyb21JbmRleCIsIlR5cGVFcnJvciIsImxlbiIsIngiLCJ5IiwiayIsIk1hdGgiLCJtYXgiLCJhYnMiLCJpc05hTiIsImFzc2lnbiIsInZhckFyZ3MiLCJ0byIsImluZGV4IiwibmV4dFNvdXJjZSIsIm5leHRLZXkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm9iamVjdEFzc2lnblBvbHlmaWxsIiwibW9kdWxlRnVuY3Rpb24iLCJpbnN0YW5jZSIsImlzTW9kdWxlIiwidGV4dCIsIiRrZXkiLCJ0ZXh0Q2ZnIiwiZXhwb3J0RnVuYyIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJpc0pRdWVyeSIsImlzRGVmaW5lZCIsImpxdWVyeSIsImlzRW1wdHkiLCJpc0VtcHR5T2JqZWN0IiwiaXNTdHJpbmciLCJpc051bWJlciIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImlzQm9vbGVhbiIsImRlZmF1bHRWYWx1ZSIsInJlc29sdmUiLCJzd2FwIiwianNvbiIsInJldCIsImNoYWluIiwidGhpc09iaiIsImhhbmRsZXJzIiwiYXBwbHkiLCJzaGlmdCIsIl9hcmd1bWVudHMiLCJmb3JFYWNoIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImNhbGxOb3ciLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaW5oZXJpdHMiLCJTdWIiLCJQYXJlbnQiLCJvcHRpb25zIiwiZXhjbHVkZUZpZWxkcyIsIl9zdXBlciIsIl9zdXBlckNvbnN0Iiwic3RhdGljRmllbGQiLCJFcnJvciIsImV4dGVuZGFibGUiLCJleHRlbmRhYmxlQ2xhc3MiLCJ3YXJuIiwiZW50aXR5TWFwIiwiJiIsIjwiLCI+IiwiXCIiLCInIiwiLyIsImAiLCI9Iiwic3RyaW5nIiwiZXNjYXBlSHRtbCIsIlN0cmluZyIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3V0UHJlZml4Iiwic3RhcnRzV2l0aCIsImN1dFN1ZmZpeCIsInN1ZmZpeCIsImVuZHNXaXRoIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwibG93ZXJDYXNlRmlyc3RMZXR0ZXIiLCJ0b0xvd2VyQ2FzZSIsImh0bWxFbmNvZGUiLCJodG1sIiwiZW5jb2RlIiwiaHRtbERlY29kZSIsImRlY29kZSIsInRlbXBsYXRlIiwidG1wbCIsIm1hdGNoIiwiY29udGVudHMiLCJvZmZzZXQiLCJhcnJheSIsIm1vdmUiLCJhcnIiLCJvbGRfaW5kZXgiLCJuZXdfaW5kZXgiLCJzcGxpY2UiLCJ4eHgiLCJzZXRJbnRlcnZhbCIsInV0aWwiLCJuZXdMaXN0IiwiY29uY2F0IiwiZWxlbWVudCIsIndpbmRvdyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBekIsRUFBQTZCLEVBQUEsU0FBQTFCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQXFCLFdBQ0EsV0FBMkIsT0FBQXJCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFpQixFQUFBQyxHQUFzRCxPQUFBakIsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUIsRUFBQUMsSUFHdEQvQixFQUFBa0MsRUFBQSxHQUlBbEMsSUFBQW1DLEVBQUEseUNDbEVBLElBQUk3QixFQUFVLEdBTVY4QixFQUFZLEdBT1pDLEVBQWlCLEdBTWpCQyxFQUFrQixHQWlKbEJDLEVBQVUsU0FBVUMsRUFBVUMsR0FDOUIsSUFBSXRDLEVBQVN1QyxFQUFpQkYsRUFBVUMsR0FJeEMsT0FIS3RDLEdBQ0R3QyxRQUFRQyxNQUFNLGtDQUFvQ0osR0FFL0NyQyxHQVVQdUMsRUFBbUIsU0FBVUcsRUFBVUMsR0FDdkMsSUFFSSxJQUFJQyxFQUFlQyxFQUFpQkgsR0FHaENJLEVBQVMzQyxFQVdiLE9BVkE0QyxFQUFFQyxLQUFLSixFQUFhSyxNQUFNLEtBQU0sU0FBVWhELEVBQUdpRCxHQUN6QyxHQUFJQSxLQUFXSixFQUNYQSxFQUFTQSxFQUFPSSxPQUNiLEtBQUlQLEVBSVAsT0FEQUcsT0FBU0ssR0FDRixFQUhQTCxFQUFTQSxFQUFPSSxHQUFXLE1BTTVCSixFQUNULE1BQU9NLElBQ0toQixFQUFRLFFBQVVJLFNBQ3hCQyxNQUFNLG9DQUFzQ0MsRUFBVVUsS0FJOURDLEVBQWdCLFNBQVVDLEVBQU1DLEdBQ2hDLElBRUksSUFJSUMsRUFBUUMsRUFKUmIsRUFBZUMsRUFBaUJTLEdBR2hDSSxFQUFjdkQsRUFFbEI0QyxFQUFFQyxLQUFLSixFQUFhSyxNQUFNLEtBQU0sU0FBVWhELEVBQUdpRCxHQUN6QyxLQUFJQSxLQUFXUSxHQUtYLE9BQU8sRUFKUEQsRUFBT1AsRUFDUE0sRUFBU0UsRUFDVEEsRUFBY0EsRUFBWVIsS0FLbENNLEVBQU9DLEdBQVFGLEVBQ2pCLE1BQU9ILElBQ0toQixFQUFRLFFBQVVJLFNBQ3hCQyxNQUFNLGtDQUFvQ2EsRUFBTUYsS0FTeERPLEVBQVN4RCxFQUFPLE9BQWEsQ0FDN0J5RCxHQUFJLFNBV0o5QyxJQUFLLFNBQVVkLEVBQVF3QixFQUFLcUMsR0FDeEIsR0FBeUIsSUFBckJDLFVBQVVDLE9BQ1YsT0FBT0MsS0FBS2hFLE9BQU9BLEdBQ2hCLEdBQUlpRSxFQUFXekMsR0FBTSxDQUN4QixJQUFJc0IsRUFBU2tCLEtBQUtoRSxPQUFPQSxHQUFRd0IsR0FDakMsT0FBUXlDLEVBQVduQixHQUFXQSxFQUFTZSxJQVkvQzdELE9BQVEsU0FBVUEsR0FNZCxPQUxBQSxFQUFVQSxFQUFPNEQsR0FBTTVELEVBQU80RCxHQUFLNUQsRUFFOUJnRSxLQURMaEUsRUFBUzZDLEVBQWlCN0MsTUFFdEJnRSxLQUFLaEUsR0FBVSxJQUVaZ0UsS0FBS2hFLElBV2hCa0UsR0FBSSxTQUFVbEUsRUFBUXdCLEVBQUtxQyxHQUN2QixPQUE2QyxJQUF0Q0csS0FBS2xELElBQUlkLEVBQVF3QixFQUFLcUMsSUFZakNNLElBQUssU0FBVXJFLEVBQVUwQixFQUFLTixHQUUxQixHQUF5QixJQUFyQjRDLFVBQVVDLE9BQWMsQ0FDeEIsSUFBSUssRUFBT0osS0FDWGpCLEVBQUVDLEtBQUtsRCxFQUFVLFNBQVV1RSxFQUFXVixHQUNsQ1MsRUFBS0QsSUFBSUUsRUFBV1YsVUFFSSxJQUFyQkcsVUFBVUMsT0FDakJoQixFQUFFdUIsT0FBT04sS0FBS2hFLE9BQU9GLEdBQVcwQixHQUNKLElBQXJCc0MsVUFBVUMsU0FDakJDLEtBQUtoRSxPQUFPRixHQUFVMEIsR0FBT04sS0FVckNxRCxFQUFRcEUsRUFBTyxNQUFZLENBQzNCcUUsT0FBUXpCLEVBQUUsSUFXVjBCLElBQUssU0FBVUQsRUFBUUUsRUFBVUMsR0FFN0IsT0FEQVgsS0FBS1EsT0FBT0MsSUFBSUQsRUFBUUUsRUFBVUMsR0FDM0JYLE1BY1hZLEdBQUksU0FBVUwsRUFBT0csRUFBVUcsRUFBTUYsR0FFakMsT0FEQVgsS0FBS1EsT0FBT0ksR0FBR0wsRUFBT0csRUFBVUcsRUFBTUYsR0FDL0JYLE1BWVhjLFFBQVMsU0FBVUMsRUFBV0MsR0FFMUIsT0FEQWhCLEtBQUtRLE9BQU9NLFFBQVFDLEVBQVdDLEdBQ3hCaEIsTUFjWGlCLElBQUssU0FBVVYsRUFBT0csRUFBVUcsRUFBTUYsR0FFbEMsT0FEQVgsS0FBS1EsT0FBT1MsSUFBSVYsRUFBT0csRUFBVUcsRUFBTUYsR0FDaENYLE1BVVhrQixJQUFLLFNBQVVDLEdBQ1hBLEVBQU9YLE9BQVN6QixFQUFFLElBQ2xCb0MsRUFBT1AsR0FBSzdCLEVBQUVxQyxNQUFNYixFQUFNSyxHQUFJTyxHQUM5QkEsRUFBT0YsSUFBTWxDLEVBQUVxQyxNQUFNYixFQUFNVSxJQUFLRSxHQUNoQ0EsRUFBT1YsSUFBTTFCLEVBQUVxQyxNQUFNYixFQUFNRSxJQUFLVSxHQUNoQ0EsRUFBT0wsUUFBVS9CLEVBQUVxQyxNQUFNYixFQUFNTyxRQUFTSyxHQUN4Q0EsRUFBT0UsaUJBQW1CdEMsRUFBRXFDLE1BQU1iLEVBQU1jLGlCQUFrQkYsSUFzQjlERSxpQkFBa0IsU0FBVUYsRUFBUVosRUFBT1MsR0FDdkMsSUFBSU0sRUFFSixPQUFReEIsVUFBVUMsUUFDZCxLQUFLLEVBQ0R1QixFQUFVdEIsS0FBS1EsT0FDZkQsRUFBUVksRUFDUixNQUNKLEtBQUssRUFDR3BDLEVBQUV3QyxRQUFRaEIsSUFDVmUsRUFBVXRCLEtBQUtRLE9BQ2ZRLEVBQWtCVCxHQUVsQmUsRUFBVXZDLEVBQUVvQyxHQUVoQixNQUNKLFFBQ0lHLEVBQVV2QyxFQUFFb0MsR0FJcEIsSUFBS1osRUFDRCxPQUFPLEVBR1gsSUFBSWlCLEVBQVd6QyxFQUFFMEMsTUFBTWxCLEdBRXZCLE9BREFlLEVBQVFSLFFBQVFVLEdBQ1RBLEVBQVNFLHVCQVNwQjdDLEVBQW1CLFNBQVUzQixHQUM3QixPQUFPeUUsRUFBV0EsRUFBV3pFLEVBQU8sV0FBWSxhQVdoRHlFLEVBQWEsU0FBVXpFLEVBQU8wRSxHQUM5QixPQUFLQyxFQUFZM0UsRUFBTzBFLEdBR2pCMUUsRUFBTTRFLFVBQVVGLEVBQU83QixPQUFRN0MsRUFBTTZDLFFBRmpDN0MsR0FXWDJFLEVBQWMsU0FBVUUsRUFBS0gsR0FDN0IsU0FBS0csSUFBUUgsSUFHa0IsSUFBeEJHLEVBQUlDLFFBQVFKLElBR25CM0IsRUFBYSxTQUFVVixHQUN2QixZQUFzQixJQUFSQSxHQUdkMEMsRUFBa0IsU0FBVWpHLEVBQVFrRyxHQUNwQ0EsRUFBTUEsR0FBTzlELEVBQVEsT0FDckJwQyxFQUFPa0csSUFBTUEsRUFBSWxHLE9BQU9BLElBSTVCK0MsRUFBRSxXQUNFLElBQUltRCxFQUFNOUQsRUFBUSxPQUVsQlcsRUFBRUMsS0FBS2YsRUFBVyxTQUFVaEMsRUFBR0QsR0FDM0JpRyxFQUFnQmpHLEVBQVFrRyxLQUc1Qm5ELEVBQUVDLEtBQUtkLEVBQWdCLFNBQVVqQyxFQUFHRCxHQUNoQ21HLEVBQVduRyxLQUdmb0csRUFBT0MsYUFBYyxFQUNyQjlCLEVBQU1PLFFBQVEsZ0JBQ2QvQixFQUFFdUQsVUFBVXhCLFFBQVEsZUFBZ0IsRUFBQyxFQUFPc0IsTUFHaEQsSUFBSUQsRUFBYSxTQUFVbkcsR0FDdkIsSUFBSWtHLEVBQU05RCxFQUFRLE9BRWxCLEdBREFtQyxFQUFNTyxRQUFRLDBCQUEyQjlFLEdBQ3JDQSxFQUFPMkMsS0FDUCxJQUVJNEIsRUFBTU8sUUFBUTlFLEVBQU80RCxHQUFHMkMsUUFBUSxJQUFLLEtBQU8sY0FBZXZHLEdBRTNEdUUsRUFBTU8sUUFBUTlFLEVBQU80RCxHQUFHMkMsUUFBUSxNQUFPLEtBQU8sY0FBZXZHLEdBQzdEQSxFQUFPMkMsT0FDUDRCLEVBQU1PLFFBQVE5RSxFQUFPNEQsR0FBRzJDLFFBQVEsTUFBTyxLQUFPLGFBQWN2RyxHQUc1RHVFLEVBQU1PLFFBQVE5RSxFQUFPNEQsR0FBRzJDLFFBQVEsSUFBSyxLQUFPLGFBQWN2RyxHQUM1RCxNQUFPd0csR0FDTE4sRUFBSXpELE1BQU0sZ0NBQWtDekMsRUFBTzRELEdBQUk0QyxHQUcvRGpDLEVBQU1PLFFBQVEseUJBQTBCOUUsR0FDeENrRyxFQUFJTyxNQUFNLHVCQUF5QnpHLEVBQU80RCxLQUkxQzhDLEVBQVcsR0FFZm5DLEVBQU1LLEdBQUcscUNBQXNDLFNBQVUrQixHQUdyRDVELEVBQUVDLEtBQUtiLEVBQWlCLFNBQVVsQyxFQUFHRCxHQUM3QkEsRUFBTzRHLGdCQUFrQkYsRUFBU1YsUUFBUWhHLEVBQU80RCxLQUFPLEdBQ3hENUQsRUFBTzJDLE1BQUssS0FJcEI0QixFQUFNTyxRQUFRLGdCQUNkL0IsRUFBRXVELFVBQVV4QixRQUFRLGVBQWdCLEVBQUMsRUFBTXNCLE1BQzVDeEIsR0FBRyx3Q0FBeUMsU0FBVStCLEdBQ3JERCxFQUFXLEdBQ1gzRCxFQUFFQyxLQUFLZixFQUFXLFNBQVVoQyxFQUFHRCxHQUN2QkEsRUFBTzZHLFFBQ1A3RyxFQUFPNkcsU0FFWEgsRUFBU0ksS0FBSzlHLEVBQU80RCxRQUk3QixJQUtJbUQsRUFBd0IsV0FDbkJDLE1BQU1uRixVQUFVb0YsVUFDakJ0RyxPQUFPQyxlQUFlb0csTUFBTW5GLFVBQVcsV0FBWSxDQUMvQ1gsTUFBTyxTQUFVZ0csRUFBZUMsR0FFNUIsR0FBWSxNQUFSbkQsS0FDQSxNQUFNLElBQUlvRCxVQUFVLGlDQUl4QixJQUFJMUcsRUFBSUMsT0FBT3FELE1BR1hxRCxFQUFNM0csRUFBRXFELFNBQVcsRUFHdkIsR0FBWSxJQUFSc0QsRUFDQSxPQUFPLEVBS1gsSUFTdUJDLEVBQUdDLEVBVHRCN0YsRUFBZ0IsRUFBWnlGLEVBT0pLLEVBQUlDLEtBQUtDLElBQUloRyxHQUFLLEVBQUlBLEVBQUkyRixFQUFNSSxLQUFLRSxJQUFJakcsR0FBSSxHQU9qRCxLQUFPOEYsRUFBSUgsR0FBSyxDQUdaLElBUm1CQyxFQVFENUcsRUFBRThHLE9BUkVELEVBUUVMLElBUFEsaUJBQU5JLEdBQStCLGlCQUFOQyxHQUFrQkssTUFBTU4sSUFBTU0sTUFBTUwsR0FRbkYsT0FBTyxFQUdYQyxJQUlKLE9BQU8sT0FNSSxXQUNLLG1CQUFqQjdHLE9BQU9rSCxRQUVkbEgsT0FBT0MsZUFBZUQsT0FBUSxTQUFVLENBQ3BDTyxNQUFPLFNBQWdCaUUsRUFBUTJDLEdBRTNCLEdBQWMsTUFBVjNDLEVBQ0EsTUFBTSxJQUFJaUMsVUFBVSw4Q0FLeEIsSUFGQSxJQUFJVyxFQUFLcEgsT0FBT3dFLEdBRVA2QyxFQUFRLEVBQUdBLEVBQVFsRSxVQUFVQyxPQUFRaUUsSUFBUyxDQUNuRCxJQUFJQyxFQUFhbkUsVUFBVWtFLEdBRTNCLEdBQWtCLE1BQWRDLEVBQ0EsSUFBSyxJQUFJQyxLQUFXRCxFQUVadEgsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLNkgsRUFBWUMsS0FDakRILEVBQUdHLEdBQVdELEVBQVdDLElBS3pDLE9BQU9ILEdBRVhJLFVBQVUsRUFDVkMsY0FBYyxLQXBGdEJDLEdBQ0F0QixJQTBGSixJQUFNWCxFQUFTLENBQ1hwRyxPQXBpQlMsU0FBVTRELEVBQUkwRSxHQUV2QixJQUFJQyxFQUFXaEcsRUFBaUJxQixHQUFJLEdBR3BDLElBQUkyRSxFQUFTM0UsR0FBYixDQUlBMkUsRUFBUzNFLEdBQUssa0JBQW9CZixFQUFpQmUsR0FDbkQyRSxFQUFTbkcsUUFBVUEsRUFDbkJtRyxFQUFTM0IsZ0JBQWlCLEVBQzFCMkIsRUFBUzVFLE9BQVN2QixFQUFRLFVBQVVwQyxPQUFPdUksR0FDM0NBLEVBQVNDLFVBQVcsRUFFcEJELEVBQVNFLEtBQU8sU0FBVUMsR0FDdEIsSUFBSUMsRUFBVUosRUFBUzVFLE9BQVQsS0FDZCxPQUFRZ0YsRUFBV0EsRUFBUUQsUUFBUXZGLEdBR3ZDLElBQUl5RixFQUFhTCxFQUFRLE9BQVUsU0FBVXhJLEdBQ3pDZ0QsRUFBRXVCLE9BQU9pRSxFQUFVeEksSUFJdkIsSUFDSXVJLEVBQWVDLEVBQVVuRyxFQUFTVyxHQUU5QjZGLElBQWVMLEVBQVEsUUFDdkJsRixFQUFja0YsRUFBUzNFLEdBQUkyRSxFQUFRLFFBRXpDLE1BQU8vQixHQUNMaEUsUUFBUUMsTUFBTSxnQ0FBa0NtQixFQUFJNEMsR0FpQnhELE9BZEF2RSxFQUFVNkUsS0FBS3lCLEdBRVhBLEVBQVM1RixNQUFRNEYsRUFBUzNCLGdCQUMxQnpFLEVBQWdCMkUsS0FBS3lCLEdBSXBCbkMsRUFBT0MsYUFHUkosRUFBZ0JzQyxHQUNoQnBDLEVBQVdvQyxJQUhYckcsRUFBZTRFLEtBQUt5QixHQU1qQkEsSUFvZlBwSSxVQUNBd0QsU0FDQVksUUFDQW5DLFdBR1dnRSxJQ3ZwQlh6RSxFQUFTLENBQ1RrSCxXQUFZLFNBQVN0RixHQUNqQixPQUFPUixFQUFFOEYsV0FBV3RGLElBRXhCdUYsU0FBVSxTQUFTdkYsR0FDZixPQUFPUixFQUFFZ0csY0FBY3hGLElBRTNCeUYsU0FBVSxTQUFTekYsR0FDZixPQUFPUyxLQUFLaUYsVUFBVTFGLElBQVFBLEVBQUkyRixRQUV0QzNELFFBQVMsU0FBU2hDLEdBQ2QsT0FBT1IsRUFBRXdDLFFBQVFoQyxJQUVyQjRGLFFBQVMsU0FBUzVGLEdBQ2QsT0FBSUEsSUFJRDVCLEVBQU80RCxRQUFRaEMsR0FDUEEsRUFBSVEsUUFBVSxFQUdsQmhCLEVBQUVxRyxjQUFjN0YsS0FFM0I4RixTQUFVLFNBQVM5RixHQUNmLE1BQXNCLGlCQUFSQSxHQUVsQitGLFNBQVUsU0FBUzVILEdBQ2YsT0FBT3NDLEtBQUtpRixVQUFVdkgsS0FBT2tHLE1BQU0yQixXQUFXN0gsS0FBTzhILFNBQVM5SCxJQUVsRStILFVBQVcsU0FBU2xHLEdBQ2hCLE1BQXNCLGtCQUFSQSxHQUVsQm1HLGFBQWMsU0FBU25HLEVBQUttRyxHQUN4QixPQUFPL0gsRUFBT3NILFVBQVUxRixHQUFPQSxFQUFNbUcsR0FFekNDLFFBQVMsU0FBU3BHLEVBQUtqQyxFQUFJcUIsR0FDdkIsSUFBSUcsRUFBU1MsRUFXYixPQVZBUixFQUFFQyxLQUFLMUIsRUFBRzJCLE1BQU0sS0FBTSxTQUFTaEQsRUFBR2lELEdBQzlCLEdBQUdBLEtBQVdKLEVBQ1ZBLEVBQVNBLEVBQU9JLE9BQ2IsS0FBR1AsRUFJTixPQURBRyxPQUFTSyxHQUNGLEVBSFBMLEVBQVNBLEVBQU9JLEdBQVcsTUFNNUJKLEdBRVg4RyxLQUFNLFNBQWNDLEdBQ2hCLElBQUlDLEVBQU0sR0FDVixJQUFJLElBQUl0SSxLQUFPcUksRUFDWEMsRUFBSUQsRUFBS3JJLElBQVFBLEVBRXJCLE9BQU9zSSxHQUVYYixVQUFXLFNBQVMxRixHQUNoQixHQUFHTyxVQUFVQyxPQUFTLEVBQUcsQ0FDckIsSUFDSUssRUFBT0osS0FPWCxPQU5BQSxLQUFLaEIsS0FBS2MsVUFBVyxTQUFTa0UsRUFBTzlHLEdBQ2pDLElBQUlrRCxFQUFLNkUsVUFBVS9ILEdBQ2YsT0FBTyxLQUpGLEVBVWpCLFlBQXNCLElBQVJxQyxHQUVsQndHLE1BQU8sU0FBU0MsR0FDWixJQUFJQyxFQUFXLEdBSWYsT0FIQWpELE1BQU1uRixVQUFVaUYsS0FBS29ELE1BQU1ELEVBQVVuRyxXQUNyQ21HLEVBQVNFLFFBRUYsV0FDSCxJQUFJQyxFQUFhdEcsVUFDakJtRyxFQUFTSSxRQUFRLFNBQVMxRixHQUN0QkEsRUFBUXVGLE1BQU1GLEVBQVNJLE9BSW5DRSxTQUFVLFNBQVNDLEVBQU1DLEVBQU1DLEdBQzNCLElBQUlDLEVBQ0osT0FBTyxXQUNILElBQUlDLEVBQVUzRyxLQUFNNEcsRUFBTzlHLFVBS3ZCK0csRUFBVUosSUFBY0MsRUFDNUJJLGFBQWFKLEdBQ2JBLEVBQVVLLFdBTkUsV0FDUkwsRUFBVSxLQUNMRCxHQUFXRixFQUFLTCxNQUFNUyxFQUFTQyxJQUlaSixHQUN4QkssR0FBU04sRUFBS0wsTUFBTVMsRUFBU0MsS0FHekNJLFNBQVUsU0FBU0MsRUFBS0MsRUFBUUMsR0FDNUIsSUFBSSxJQUFJbEwsS0FBS2lMLElBQ0xDLElBQVlBLEVBQVFDLGVBQWlCRCxFQUFRQyxjQUFjcEYsUUFBUS9GLEdBQUssS0FDeEVnTCxFQUFJaEwsR0FBS2lMLEVBQU9qTCxJQUl4QmdMLEVBQUlwSixVQUFZbEIsT0FBT1ksT0FBTzJKLEVBQU9ySixXQUNyQ29KLEVBQUlJLE9BQVNILEVBQU9ySixVQUNwQm9KLEVBQUlLLFlBQWNKLEVBRWxCRCxFQUFJcEosVUFBSixPQUF1QixTQUFTckIsR0FDNUIsSUFFUW9LLEVBRkpXLEVBQWNOLEVBQUl6SyxHQUN0QixPQUFHbUIsRUFBT2tILFdBQVcwQyxJQUdkekgsVUFBVUMsT0FBUyxJQUNsQjZHLEVBQU8sR0FDUDVELE1BQU1uRixVQUFVaUYsS0FBS29ELE1BQU1VLEVBQU05RyxXQUNqQzhHLEVBQUtULFNBRUZvQixFQUFZckIsTUFBTWxHLEtBQU00RyxJQUV4QlcsR0FJZk4sRUFBSXBKLFVBQUosTUFBc0IsV0FDbEIsSUFBSW9KLEVBQUlJLE9BQU92SCxVQUFVLElBQ3JCLE1BQU0sSUFBSTBILE1BQU0sMkNBQTZDMUgsVUFBVSxJQUczRSxJQUFJOEcsRUFPSixPQUxHOUcsVUFBVUMsT0FBUyxJQUNsQjZHLEVBQU8sR0FDUDVELE1BQU1uRixVQUFVaUYsS0FBS29ELE1BQU1VLEVBQU05RyxXQUNqQzhHLEVBQUtULFNBRUZjLEVBQUlJLE9BQU92SCxVQUFVLElBQUlvRyxNQUFNbEcsS0FBTTRHLEtBR3BEYSxXQUFZLFNBQVNOLEdBRWR4SixFQUFPa0gsV0FBV3NDLEtBQ2pCQSxFQUFVLENBQUN4SSxLQUFLd0ksSUFHcEIsSUFBSU8sRUFBa0JQLEVBQVF4SSxNQUFRLGFBRXRDLEdBQUd3SSxFQUFRM0ssS0FDUCxJQUNJRyxPQUFPQyxlQUFlOEssRUFBaUIsT0FBUSxDQUFFeEssTUFBT2lLLEVBQVEzSyxPQUNsRSxNQUFNNEMsR0FDSlosUUFBUW1KLEtBQUssK0NBQWdEdkksR0F5QnJFLE9BcEJBc0ksRUFBZ0JwSCxPQUFTLFNBQVMzQixFQUFNbkMsR0FDakNtQixFQUFPMEgsU0FBUzFHLEtBQ2ZuQyxFQUFPbUMsRUFDUEEsT0FBT1EsR0FHWFIsRUFBT0EsR0FBUSxXQUNYK0ksRUFBZ0J4QixNQUFNbEcsS0FBTUYsWUFHaEMsSUFBSW1ILEVBQU10SixFQUFPOEosV0FBVyxDQUN4QjlJLEtBQU1BLEVBQ05uQyxLQUFNQSxJQUtWLE9BRkFtQixFQUFPcUosU0FBU0MsRUFBS1MsRUFBaUIsQ0FBQ04sY0FBZSxDQUFDLFlBRWhESCxHQUdKUyxJQUlYRSxFQUFZLENBQ1pDLElBQUssUUFDTEMsSUFBSyxPQUNMQyxJQUFLLE9BQ0xDLElBQUssU0FDTEMsSUFBSyxRQUNMQyxJQUFLLFNBQ0xDLElBQUssU0FDTEMsSUFBSyxVQUdMQyxFQUFTLENBQ1RDLFdBQVksU0FBU0QsR0FDakIsT0FBT0UsT0FBT0YsR0FBUTlGLFFBQVEsZUFBZ0IsU0FBU3ZFLEdBQ25ELE9BQU80SixFQUFVNUosTUFHekJ3SyxXQUFZLFNBQVNILEdBQ2pCLE9BQU9BLEVBQU9JLE9BQU8sR0FBR0MsY0FBZ0JMLEVBQU9NLE1BQU0sSUFFekRDLFVBQVcsU0FBUzdHLEVBQUtILEdBQ3JCLE9BQUk1QixLQUFLNkksV0FBVzlHLEVBQUtILEdBR2xCRyxFQUFJRCxVQUFVRixFQUFPN0IsT0FBUWdDLEVBQUloQyxRQUY3QmdDLEdBSWYrRyxVQUFXLFNBQVMvRyxFQUFLZ0gsR0FDckIsT0FBT2hILEVBQUk0RyxNQUFNLEdBQW9CLEVBQWpCSSxFQUFPaEosU0FFL0I4SSxXQUFZLFNBQVM5RyxFQUFLSCxHQUN0QixTQUFJakUsRUFBT3NILFVBQVVsRCxLQUFTcEUsRUFBT3NILFVBQVVyRCxLQUdoQixJQUF4QkcsRUFBSUMsUUFBUUosSUFFdkJvSCxTQUFVLFNBQVNqSCxFQUFLZ0gsR0FDcEIsU0FBSXBMLEVBQU9zSCxVQUFVbEQsS0FBU3BFLEVBQU9zSCxVQUFVOEQsTUFHYSxJQUFyRGhILEVBQUlDLFFBQVErRyxFQUFRaEgsRUFBSWhDLE9BQVNnSixFQUFPaEosU0FFbkRrSixzQkFBdUIsU0FBK0JqTCxHQUNsRCxPQUFJQSxHQUFNQSxFQUFFK0IsT0FJTC9CLEVBQUV5SyxPQUFPLEdBQUdDLGNBQWdCMUssRUFBRTJLLE1BQU0sR0FIaEMzSyxHQUtma0wscUJBQXNCLFNBQStCbEwsR0FDakQsT0FBSUEsR0FBTUEsRUFBRStCLE9BSUwvQixFQUFFeUssT0FBTyxHQUFHVSxjQUFnQm5MLEVBQUUySyxNQUFNLEdBSGhDM0ssR0FPZm9MLFdBQVksU0FBU2xNLEdBQ2pCLE9BQU82QixFQUFFLFVBQVUwRixLQUFLdkgsR0FBT21NLFFBRW5DQyxPQUFRLFNBQVNwTSxHQUNiLE9BQU82QixFQUFFLFVBQVUwRixLQUFLdkgsR0FBT21NLFFBR25DRSxXQUFZLFNBQVNyTSxHQUNqQixPQUFPNkIsRUFBRSxVQUFVc0ssS0FBS25NLEdBQU91SCxRQUVuQytFLE9BQVEsU0FBU3RNLEdBQ2IsT0FBTzZCLEVBQUUsVUFBVXNLLEtBQUtuTSxHQUFPdUgsUUFFbkNnRixTQUFVLFNBQVNDLEVBQU0vSixHQUNyQixPQUFPK0osRUFBS25ILFFBQVEsV0FBWSxTQUFTb0gsRUFBT0MsRUFBVUMsRUFBUTdMLEdBQzlELElBQUlkLEVBQVFTLEVBQU9nSSxRQUFRaEcsRUFBUWlLLEdBQ25DLE9BQU9qTSxFQUFPc0gsVUFBVS9ILEdBQVNBLEVBQVF5TSxNQUtqREcsRUFBUSxDQUNSQyxLQUFNLFNBQVVDLEVBQUtDLEVBQVdDLEdBQzVCLEtBQU9ELEVBQVksR0FDZkEsR0FBYUQsRUFBSWpLLE9BRXJCLEtBQU9tSyxFQUFZLEdBQ2ZBLEdBQWFGLEVBQUlqSyxPQUVyQixHQUFJbUssR0FBYUYsRUFBSWpLLE9BRWpCLElBREEsSUFBSXlELEVBQUkwRyxFQUFZRixFQUFJakssT0FDVCxFQUFQeUQsS0FDSndHLEVBQUlsSCxVQUFLM0QsR0FJakIsT0FEQTZLLEVBQUlHLE9BQU9ELEVBQVcsRUFBR0YsRUFBSUcsT0FBT0YsRUFBVyxHQUFHLElBQzNDRCxHQUVYSSxJQUFLLFdBQ0Q1TCxRQUFRMEQsSUFBSSxVQU9wQkUsRUFBT3BHLE9BQU8sT0FBUSxTQUFTQSxHQUMzQkEsRUFBTSxPQUFRLENBQ1YyQyxLQUFNLGFBR05oQixPQUFRQSxFQUNSMEssT0FBUUEsRUFDUnlCLE1BQU9BLE1DalNmTyxZQUFZLFdBQ1JDLEVBQVdGLE9BQ1osS0FFSGhJLEVBQU83QixNQUFNSyxHQUFHLGdDQUFpQyxTQUFTK0IsRUFBSzJILEdBRTNEOUwsUUFBUTBELElBQUksUUFDWm9JLEVBQUtSLE1BQU1NLElBQU0sa0JBQU81TCxRQUFRMEQsSUFBSSxVQUl4QzFELFFBQVEwRCxJQUFJLFlBR1osSUFJUXFJLEVBUUpkLEVBQVEseUJBQUFlLFFBUkpELEVBQVUsR0FKTCxDQUFDLE1BQU8sUUFBUyxRQUtyQmxFLFFBQVEsU0FBU29FLEdBQ2xCRixHQUFPLE9BQUFDLE9BQVdDLEVBQVgsV0FFSkYsR0FJQywyQkFJWi9MLFFBQVEwRCxJQUFJdUgsR0FFWmlCLE9BQU90SSxPQUFTQSIsImZpbGUiOiJodW1odWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKipcclxuICogU2V0cyB1cCB0aGUgaHVtaHViIG5hbWVzcGFjZSBhbmQgbW9kdWxlIG1hbmFnZW1lbnQuXHJcbiAqIFRoaXMgbmFtZXNwYWNlIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxyXG4gKlxyXG4gKiBtb2R1bGUgLSBmb3IgYWRkaW5nIG1vZHVsZXMgdG8gdGhpcyBuYW1lc3BhY2UgYW5kIGluaXRpYWxpemluZyB0aGVtXHJcbiAqXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcblxyXG4vKiogQG1vZHVsZSBodW1odWIgKiovXHJcblxyXG4vKipcclxuICogQ29udGFpbnMgdGhlIG1vZHVsZXMgbmFtZXNwYWNlIGUuZy4gbW9kdWxlcy51aS5tb2RhbFxyXG4gKiBAdHlwZSBvYmplY3RcclxuICogQG5hbWVzcGFjZSBodW1odWIubW9kdWxlc1xyXG4gKi9cclxudmFyIG1vZHVsZXMgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBGbGF0IGFycmF5IHdpdGggYWxsIHJlZ2lzdGVyZWQgbW9kdWxlcy5cclxuICogQHR5cGUgQXJyYXlcclxuICovXHJcbnZhciBtb2R1bGVBcnIgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBVc2VkIHRvIGNvbGxlY3QgbW9kdWxlcyBhZGRlZCB3aGlsZSBpbml0aWFsIHBhZ2UgbG9hZC5cclxuICogVGhlc2UgbW9kdWxlcyB3aWxsIGJlIGludGl0aWFsaXplZCBhZnRlciB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXHJcbiAqIEB0eXBlIEFycmF5XHJcbiAqL1xyXG52YXIgaW5pdGlhbE1vZHVsZXMgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBDb250YWlucyBhbGwgbW9kdWxlcyB3aGljaCBuZWVkcyB0byBiZSByZWluaXRpYWxpemVkIGFmdGVyIGEgcGpheCByZWxvYWRcclxuICogQHR5cGUgQXJyYXlcclxuICovXHJcbnZhciBwamF4SW5pdE1vZHVsZXMgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgbW9kdWxlIHRvIHRoZSBodW1odWIubW9kdWxlcyBuYW1lc3BhY2UuXHJcbiAqXHJcbiAqIFRoZSBtb2R1bGUgaWQgY2FuIGJlIHByb3ZpZGVkIGVpdGhlciBhc1xyXG4gKlxyXG4gKiAtIGZ1bGwgbmFtZXNwYWNlIGh1bWh1Yi5tb2R1bGVzLnVpLm1vZGFsXHJcbiAqIC0gb3IgbW9kdWxlcy51aS5tb2RhbFxyXG4gKiAtIG9yIHNob3J0IHVpLm1vZGFsXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKlxyXG4gKiBgYGBcclxuICogaHVtaHViLm1vZHVsZSgndWkubW9kYWwnLCBmdW5jdGlvbihtb2R1bGUsIHJlcXVpcmUsICQpIHsuLi59KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIFRoaXMgd291bGQgY3JlYXRlIGFuIGVtcHR5IHVpIG5hbWVzcGFjZSAoaWYgbm90IGFscmVhZHkgY3JlYXRlZCBiZWZvcmUpIHJlZ2lzdGVyIHRoZSBnaXZlbiBtb2R1bGUgYHVpLm1vZGFsYC5cclxuICpcclxuICogVGhlIG1vZHVsZSBjYW4gZXhwb3J0IGZ1bmN0aW9ucyBhbmQgcHJvcGVydGllcyBieSB1c2luZzpcclxuICpcclxuICogYGBgXHJcbiAqIG1vZHVsZS5teUZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7Li4ufVxyXG4gKlxyXG4gKiBvclxyXG4gKlxyXG4gKiBtb2R1bGUuZXhwb3J0KHtcclxuICogIG15RnVuY3Rpb246IGZ1bmN0aW9uKCkgey4uLn1cclxuICogfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGUgZXhwb3J0IGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgYXMgb2Z0ZW4gYXMgbmVlZGVkIChidXQgc2hvdWxkIGJlIGNhbGxlZCBvbmNlIGF0IHRoZSBlbmQgb2YgdGhlIG1vZHVsZSkuXHJcbiAqIEl0cyBhbHNvIHBvc3NpYmxlIHRvIGV4cG9ydCBzaW5nbGUgY2xhc3NlcyBlLmcuOlxyXG4gKlxyXG4gKiBgYGBcclxuICogaHVtaHViLm1vZHVsZSgnbXkuTG9hZGVyV2lkZ2V0JywgZnVuY3Rpb24obW9kdWxlLCByZXF1aXJlLCAkKSB7XHJcbiAqICAgIHZhciBMb2FkZXJXaWRnZXQgPSBmdW5jdGlvbigpIHsuLi59XHJcbiAqXHJcbiAqICAgIG1vZHVsZS5leHBvcnQgPSBMb2FkZXJXaWRnZXQ7XHJcbiAqIH0pO1xyXG4gKiBgYGBcclxuICpcclxuICogQSBtb2R1bGUgY2FuIHByb3ZpZGUgYW4gYGluaXRgIGZ1bmN0aW9uLCB3aGljaCBieSBkZWZhdWx0IGlzIG9ubHkgY2FsbGVkIGFmdGVyIHRoZSBmaXJzdCBpbml0aWFsaXphdGlvblxyXG4gKiBlLmcuIGFmdGVyIGEgZnVsbCBwYWdlIGxvYWQgd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkgb3Igd2hlbiBsb2FkZWQgYnkgbWVhbnMgb2YgYWpheCBhamF4LlxyXG4gKiBJbiBjYXNlIGEgbW9kdWxlcyBgaW5pdGAgZnVuY3Rpb24gbmVlZCB0byBiZSBjYWxsZWQgYWxzbyBhZnRlciBlYWNoIGBwamF4YCByZXF1ZXN0LCB0aGUgbW9kdWxlcyBgaW5pdE9uUGpheExvYWRgIGhhcyB0byBiZVxyXG4gKiBzZXQgdG8gYHRydWVgOlxyXG4gKlxyXG4gKiBgYGBcclxuICogbW9kdWxlLmluaXRPblBqYXhMb2FkID0gdHJ1ZTtcclxuICogYGBgXHJcbiAqXHJcbiAqIERlcGVuZGVuY2llczpcclxuICpcclxuICogVGhlIGNvcmUgbW9kdWxlcyBhcmUgaW5pdGlhbGl6ZWQgaW4gYSBzcGVjaWZpYyBvcmRlciB0byBwcm92aWRlIHRoZSByZXF1aXJlZCBkZXBlbmRlbmNpZXMgZm9yIGVhY2ggbW9kdWxlLlxyXG4gKiBUaGUgb3JkZXIgaXMgZ2l2ZW4gYnkgdGhlIG9yZGVyIG9mIG1vZHVsZSBjYWxscyBhbmQgaW4gY2FzZSBvZiBjb3JlIG1vZHVsZXMgY29uZmlndXJlZCBpbiB0aGUgQVBJJ3MgQXNzZXRCdW5kbGUuXHJcbiAqXHJcbiAqIEEgbW9kdWxlIGNhbiBiZSByZWNlaXZlZCBieSB1c2luZyB0aGUgcmVxdWlyZWQgZnVuY3Rpb24gd2l0aGluIGEgbW9kdWxlIGZ1bmN0aW9uLlxyXG4gKiBZb3UgY2FuIGVpdGhlciBkZXBlbmQgb24gYSBtb2R1bGUgYXQgaW5pdGlhbGlzYXRpb24gdGltZSBvciB3aXRoaW4geW91ciBmdW5jdGlvbnMgb3JcclxuICogdXNlIHRoZSBsYXp5IGZsYWcgb2YgdGhlIHJlcXVpcmUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKlxyXG4gKiBgYGBcclxuICogdmFyIG1vZGFsID0gcmVxdWlyZSgndWkubW9kYWwnKTtcclxuICpcclxuICogb3IgbGF6eSByZXF1aXJlXHJcbiAqXHJcbiAqIHZhciBtb2RhbCA9IHJlcXVpcmUoJ3VpLm1vZGFsJywgdHJ1ZSk7XHJcbiAqIGBgYGBcclxuICogQGZ1bmN0aW9uIG1vZHVsZTpodW1odWIubW9kdWxlXHJcbiAqIEBhY2Nlc3MgcHVibGljXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCB0aGUgbmFtZXNwYWNlZCBpZFxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtb2R1bGVGdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxudmFyIG1vZHVsZSA9IGZ1bmN0aW9uIChpZCwgbW9kdWxlRnVuY3Rpb24pIHtcclxuICAgIC8vQ3JlYXRlIG1vZHVsZSBpbiB0aGUgbmFtZXNwYWNlIGFuZCBhZGQgaGVscGVyIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGluc3RhbmNlID0gcmVzb2x2ZU5hbWVTcGFjZShpZCwgdHJ1ZSk7XHJcblxyXG4gICAgLy8gRG8gbm90IHJlZ2lzdGVyIG1vZHVsZXMgdHdpY2UhXHJcbiAgICBpZiAoaW5zdGFuY2UuaWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaW5zdGFuY2UuaWQgPSAnaHVtaHViLm1vZHVsZXMuJyArIF9jdXRNb2R1bGVQcmVmaXgoaWQpO1xyXG4gICAgaW5zdGFuY2UucmVxdWlyZSA9IHJlcXVpcmU7XHJcbiAgICBpbnN0YW5jZS5pbml0T25QamF4TG9hZCA9IGZhbHNlO1xyXG4gICAgaW5zdGFuY2UuY29uZmlnID0gcmVxdWlyZSgnY29uZmlnJykubW9kdWxlKGluc3RhbmNlKTtcclxuICAgIGluc3RhbmNlLmlzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbiAgICBpbnN0YW5jZS50ZXh0ID0gZnVuY3Rpb24gKCRrZXkpIHtcclxuICAgICAgICB2YXIgdGV4dENmZyA9IGluc3RhbmNlLmNvbmZpZ1sndGV4dCddO1xyXG4gICAgICAgIHJldHVybiAodGV4dENmZykgPyB0ZXh0Q2ZnWyRrZXldIDogdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZXhwb3J0RnVuYyA9IGluc3RhbmNlLmV4cG9ydCA9IGZ1bmN0aW9uIChleHBvcnRzKSB7XHJcbiAgICAgICAgJC5leHRlbmQoaW5zdGFuY2UsIGV4cG9ydHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBTZXR1cCB0aGUgbW9kdWxlIGJ5IGNhbGxpbmcgdGhlIG1vZHVsZUZ1bmN0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAgIG1vZHVsZUZ1bmN0aW9uKGluc3RhbmNlLCByZXF1aXJlLCAkKTtcclxuICAgICAgICAvLyBBbGxvd3MgbW9kdWxlLmV4cG9ydCA9IE15Q2xhc3MgZm9yIGV4cG9ydGluZyBzaW5nbGUgY2xhc3Nlcy9vYmplY3RzXHJcbiAgICAgICAgaWYgKGV4cG9ydEZ1bmMgIT09IGluc3RhbmNlLmV4cG9ydCkge1xyXG4gICAgICAgICAgICBfc2V0TmFtZVNwYWNlKGluc3RhbmNlLmlkLCBpbnN0YW5jZS5leHBvcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdoaWxlIGNyZWF0aW5nIG1vZHVsZTogJyArIGlkLCBlcnIpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZUFyci5wdXNoKGluc3RhbmNlKTtcclxuXHJcbiAgICBpZiAoaW5zdGFuY2UuaW5pdCAmJiBpbnN0YW5jZS5pbml0T25QamF4TG9hZCkge1xyXG4gICAgICAgIHBqYXhJbml0TW9kdWxlcy5wdXNoKGluc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0luaXRpYWxpemUgdGhlIG1vZHVsZXMgd2hlbiBkb2N1bWVudCBpcyByZWFkeVxyXG4gICAgaWYgKCFodW1odWIuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICBpbml0aWFsTW9kdWxlcy5wdXNoKGluc3RhbmNlKTtcclxuICAgIH0gZWxzZSB7IC8vIEluaXQgbW9kdWxlcyBhZGRlZCBhc3luY2hyb25vdXNseSAoYWpheC9wamF4KVxyXG4gICAgICAgIGFkZE1vZHVsZUxvZ2dlcihpbnN0YW5jZSk7XHJcbiAgICAgICAgaW5pdE1vZHVsZShpbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluc3RhbmNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZXNvbHZlIG5hbWVzcGFjZXMgYW5kIHJlY2VpdmUgbW9kdWxlIGluc3RhbmNlcyBvciBzaW5nbGUgY2xhc3Nlcy5cclxuICpcclxuICogRm9yIHRoZSBtb2R1bGUgaHVtaHViLm1vZHVsZXMudWkubW9kYWwgeW91IGNhbiBzZWFyY2g6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiByZXF1aXJlKCd1aS5tb2RhbCcpO1xyXG4gKiByZXF1aXJlKCdtb2R1bGVzLnVpLm1vZGFsJyk7XHJcbiAqIHJlcXVpcmUoJ2h1bWh1Yi5tb2R1bGVzLnVpLm1vZGFsJyk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gbW9kdWxlOmh1bWh1Yi5yZXF1aXJlXHJcbiAqIEBhY2Nlc3MgcHVibGljXHJcbiAqIEBwYXJhbSB7dHlwZX0gbW9kdWxlSWRcclxuICogQHBhcmFtIHtib29sZWFufSBsYXp5IC0gY2FuIGJlIHNldCB0byByZXF1aXJlIG1vZHVsZXMgd2hpY2ggYXJlIG5vdCB5ZXQgY3JlYXRlZC5cclxuICogQHJldHVybnMgb2JqZWN0IC0gdGhlIG1vZHVsZSBpbnN0YW5jZSBpZiBhbHJlYWR5IGluaXRpYWxpemVkIGVsc2UgdW5kZWZpbmVkXHJcbiAqXHJcbiAqICovXHJcbnZhciByZXF1aXJlID0gZnVuY3Rpb24gKG1vZHVsZU5TLCBsYXp5KSB7XHJcbiAgICB2YXIgbW9kdWxlID0gcmVzb2x2ZU5hbWVTcGFjZShtb2R1bGVOUywgbGF6eSk7XHJcbiAgICBpZiAoIW1vZHVsZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIG1vZHVsZSBmb3VuZCBmb3IgbmFtZXNwYWNlOiAnICsgbW9kdWxlTlMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vZHVsZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZWFyY2ggdGhlIGdpdmVuIG5hbWVzcGFjZSwgYW5kIGNyZWF0ZXMgdGhlIG5hbWVzcGFjZSBpZiBpbml0ID0gdHJ1ZS5cclxuICpcclxuICogQHBhcmFtIHt0eXBlfSB0eXBlUGF0aCB0aGUgc2VhcmNoZWQgbW9kdWxlIG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGluaXQgLSBpZiBzZXQgdG8gdHJ1ZSwgY3JlYXRlcyBuYW1lc3BhY2VzIGlmIG5vdCBhbHJlYWR5IHByZXNlbnRcclxuICogQHJldHVybnMgb2JqZWN0IC0gdGhlIGdpdmVuIG1vZHVsZVxyXG4gKi9cclxudmFyIHJlc29sdmVOYW1lU3BhY2UgPSBmdW5jdGlvbiAodHlwZVBhdGgsIGluaXQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy9jdXQgaHVtaHViLm1vZHVsZXMgcHJlZml4IGlmIHByZXNlbnRcclxuICAgICAgICB2YXIgbW9kdWxlU3VmZml4ID0gX2N1dE1vZHVsZVByZWZpeCh0eXBlUGF0aCk7XHJcblxyXG4gICAgICAgIC8vSXRlcmF0ZSB0aHJvdWdoIHRoZSBuYW1lc3BhY2UgYW5kIHJldHVybiB0aGUgbGFzdCBlbnRyeVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBtb2R1bGVzO1xyXG4gICAgICAgICQuZWFjaChtb2R1bGVTdWZmaXguc3BsaXQoJy4nKSwgZnVuY3Rpb24gKGksIHN1YlBhdGgpIHtcclxuICAgICAgICAgICAgaWYgKHN1YlBhdGggaW4gcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRbc3ViUGF0aF07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3N1YlBhdGhdID0ge307XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB1bmRlZmluZWQ7IC8vcGF0aCBub3QgZm91bmRcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9sZWF2ZSBlYWNoIGxvb3BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdmFyIGxvZyA9IHJlcXVpcmUoJ2xvZycpIHx8IGNvbnNvbGU7XHJcbiAgICAgICAgbG9nLmVycm9yKCdFcnJvciB3aGlsZSByZXNvbHZpbmcgbmFtZXNwYWNlOiAnICsgdHlwZVBhdGgsIGUpO1xyXG4gICAgfVxyXG59O1xyXG5cclxudmFyIF9zZXROYW1lU3BhY2UgPSBmdW5jdGlvbiAocGF0aCwgb2JqKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vY3V0IGh1bWh1Yi5tb2R1bGVzIHByZWZpeCBpZiBwcmVzZW50XHJcbiAgICAgICAgdmFyIG1vZHVsZVN1ZmZpeCA9IF9jdXRNb2R1bGVQcmVmaXgocGF0aCk7XHJcblxyXG4gICAgICAgIC8vSXRlcmF0ZSB0aHJvdWdoIHRoZSBuYW1lc3BhY2UgYW5kIHJldHVybiB0aGUgbGFzdCBlbnRyeVxyXG4gICAgICAgIHZhciBjdXJyZW50UGF0aCA9IG1vZHVsZXM7XHJcbiAgICAgICAgdmFyIHBhcmVudCwgbGFzdDtcclxuICAgICAgICAkLmVhY2gobW9kdWxlU3VmZml4LnNwbGl0KCcuJyksIGZ1bmN0aW9uIChpLCBzdWJQYXRoKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJQYXRoIGluIGN1cnJlbnRQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0ID0gc3ViUGF0aDtcclxuICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1cnJlbnRQYXRoO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGggPSBjdXJyZW50UGF0aFtzdWJQYXRoXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9sZWF2ZSBlYWNoIGxvb3BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhcmVudFtsYXN0XSA9IG9iajtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB2YXIgbG9nID0gcmVxdWlyZSgnbG9nJykgfHwgY29uc29sZTtcclxuICAgICAgICBsb2cuZXJyb3IoJ0Vycm9yIHdoaWxlIHNldHRpbmcgbmFtZXNwYWNlOiAnICsgcGF0aCwgZSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogTWFuYWdlcyB0aGUgc3RhdGUgYW5kIGFjY2VzcyBvZiBtb2R1bGUgY29uZmlndXJhdGlvbnMuXHJcbiAqXHJcbiAqIEBtb2R1bGUgY29uZmlnXHJcbiAqL1xyXG52YXIgY29uZmlnID0gbW9kdWxlc1snY29uZmlnJ10gPSB7XHJcbiAgICBpZDogJ2NvbmZpZycsXHJcbiAgICAvKipcclxuICAgICAqIFNlYXJjaGVzIGZvciBhIGdpdmVuIGNvbmZpZ3VyYXRpb24ga2V5IGZvciBhIGdpdmVuIG1vZHVsZS5cclxuICAgICAqXHJcbiAgICAgKiBAZnVuY3Rpb24gbW9kdWxlOmNvbmZpZy5nZXRcclxuICAgICAqIEBhY2Nlc3MgcHVibGljXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlIG1vZHVsZSBpZFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBjb25maWd1cmF0aW9uIGtleVxyXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsIGRlZmF1bHQgcmV0dXJuIHR5cGVcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICovXHJcbiAgICBnZXQ6IGZ1bmN0aW9uIChtb2R1bGUsIGtleSwgZGVmYXVsdFZhbCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZHVsZShtb2R1bGUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoX2lzRGVmaW5lZChrZXkpKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLm1vZHVsZShtb2R1bGUpW2tleV07XHJcbiAgICAgICAgICAgIHJldHVybiAoX2lzRGVmaW5lZChyZXN1bHQpKSA/IHJlc3VsdCA6IGRlZmF1bHRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHdob2xlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IG9mIGEgbW9kdWxlXHJcbiAgICAgKlxyXG4gICAgICogQGZ1bmN0aW9uIG1vZHVsZTpjb25maWcubW9kdWxlXHJcbiAgICAgKiBAYWNjZXNzIHB1YmxpY1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZVxyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKi9cclxuICAgIG1vZHVsZTogZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgIG1vZHVsZSA9IChtb2R1bGUuaWQpID8gbW9kdWxlLmlkIDogbW9kdWxlO1xyXG4gICAgICAgIG1vZHVsZSA9IF9jdXRNb2R1bGVQcmVmaXgobW9kdWxlKTtcclxuICAgICAgICBpZiAoIXRoaXNbbW9kdWxlXSkge1xyXG4gICAgICAgICAgICB0aGlzW21vZHVsZV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXNbbW9kdWxlXTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gY29uZmlndXJhdGlvbiB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgKlxyXG4gICAgICogQGZ1bmN0aW9uIG1vZHVsZTpjb25maWcuaXNcclxuICAgICAqIEBhY2Nlc3MgcHVibGljXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZmF1bHRWYWxcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBpczogZnVuY3Rpb24gKG1vZHVsZSwga2V5LCBkZWZhdWx0VmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG1vZHVsZSwga2V5LCBkZWZhdWx0VmFsKSA9PT0gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGEgZ2l2ZW4gY29uZmlndXJhdGlvbiB2YWx1ZVxyXG4gICAgICpcclxuICAgICAqIEBmdW5jdGlvbiBtb2R1bGU6Y29uZmlnLnNldFxyXG4gICAgICogQGFjY2VzcyBwdWJsaWNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIChtb2R1bGVJZCwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIC8vTW9kdWxlaWQgd2l0aCBtdWx0aXBsZSB2YWx1ZXNcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICQuZWFjaChtb2R1bGVJZCwgZnVuY3Rpb24gKG1vZHVsZUtleSwgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNldChtb2R1bGVLZXksIGNvbmZpZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAkLmV4dGVuZCh0aGlzLm1vZHVsZShtb2R1bGVJZCksIGtleSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kdWxlKG1vZHVsZUlkKVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdsb2JhbCBldmVudCBoYW5kbGluZy5cclxuICpcclxuICogQG1vZHVsZSBldmVudFxyXG4gKiovXHJcbnZhciBldmVudCA9IG1vZHVsZXNbJ2V2ZW50J10gPSB7XHJcbiAgICBldmVudHM6ICQoe30pLFxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgZ2l2ZW4gZXZlbnQgaGFuZGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAZnVuY3Rpb24gbW9kdWxlOmV2ZW50Lm9mZlxyXG4gICAgICogQGFjY2VzcyBwdWJsaWNcclxuICAgICAqIEBwYXJhbSBldmVudHNcclxuICAgICAqIEBwYXJhbSBzZWxlY3RvclxyXG4gICAgICogQHBhcmFtIGhhbmRsZXJcclxuICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZXZlbnR9XHJcbiAgICAgKi9cclxuICAgIG9mZjogZnVuY3Rpb24gKGV2ZW50cywgc2VsZWN0b3IsIGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLmV2ZW50cy5vZmYoZXZlbnRzLCBzZWxlY3RvciwgaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGFuIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQGZ1bmN0aW9uIG1vZHVsZTpldmVudC5vblxyXG4gICAgICogQGFjY2VzcyBwdWJsaWNcclxuICAgICAqIEBwYXJhbSBldmVudFxyXG4gICAgICogQHBhcmFtIHNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICogQHBhcmFtIGhhbmRsZXJcclxuICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZXZlbnR9XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoZXZlbnQsIHNlbGVjdG9yLCBkYXRhLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQsIHNlbGVjdG9yLCBkYXRhLCBoYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyBhIGdsb2JhbCBldmVudC5cclxuICAgICAqXHJcbiAgICAgKiBAZnVuY3Rpb24gbW9kdWxlOmV2ZW50LnRyaWdnZXJcclxuICAgICAqIEBhY2Nlc3MgcHVibGljXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gZXh0cmFQYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmV2ZW50fVxyXG4gICAgICovXHJcbiAgICB0cmlnZ2VyOiBmdW5jdGlvbiAoZXZlbnRUeXBlLCBleHRyYVBhcmFtZXRlcnMpIHtcclxuICAgICAgICB0aGlzLmV2ZW50cy50cmlnZ2VyKGV2ZW50VHlwZSwgZXh0cmFQYXJhbWV0ZXJzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgYSBldmVudCBoYW5kbGVyIHdoaWNoIGlzIG9ubHkgZXhlY3V0ZWQgb25jZS5cclxuICAgICAqXHJcbiAgICAgKiBAZnVuY3Rpb24gbW9kdWxlOmV2ZW50Lm9uZVxyXG4gICAgICogQGFjY2VzcyBwdWJsaWNcclxuICAgICAqIEBwYXJhbSBldmVudFxyXG4gICAgICogQHBhcmFtIHNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICogQHBhcmFtIGhhbmRsZXJcclxuICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZXZlbnR9XHJcbiAgICAgKi9cclxuICAgIG9uZTogZnVuY3Rpb24gKGV2ZW50LCBzZWxlY3RvciwgZGF0YSwgaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuZXZlbnRzLm9uZShldmVudCwgc2VsZWN0b3IsIGRhdGEsIGhhbmRsZXIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBzdWIgZXZlbnQgbWFuYWdlciBhbmQgYXBwZW5kcyBpdCB0byBhIGdpdmVuIHRhcmdldCBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogQGZ1bmN0aW9uIG1vZHVsZTpldmVudC5zdWJcclxuICAgICAqIEBhY2Nlc3MgcHVibGljXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XHJcbiAgICAgKi9cclxuICAgIHN1YjogZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHRhcmdldC5ldmVudHMgPSAkKHt9KTtcclxuICAgICAgICB0YXJnZXQub24gPSAkLnByb3h5KGV2ZW50Lm9uLCB0YXJnZXQpO1xyXG4gICAgICAgIHRhcmdldC5vbmUgPSAkLnByb3h5KGV2ZW50Lm9uZSwgdGFyZ2V0KTtcclxuICAgICAgICB0YXJnZXQub2ZmID0gJC5wcm94eShldmVudC5vZmYsIHRhcmdldCk7XHJcbiAgICAgICAgdGFyZ2V0LnRyaWdnZXIgPSAkLnByb3h5KGV2ZW50LnRyaWdnZXIsIHRhcmdldCk7XHJcbiAgICAgICAgdGFyZ2V0LnRyaWdnZXJDb25kaXRpb24gPSAkLnByb3h5KGV2ZW50LnRyaWdnZXJDb25kaXRpb24sIHRhcmdldCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgYW4gZ2l2ZW4gZXZlbnQgYW5kIHJldHVybnMgd2VhdGhlciBvciBub3QgdGhlIGV2ZW50cyBgcHJldmVudERlZmF1bHRzKClgIHdhcyBjYWxsZWQuXHJcbiAgICAgKlxyXG4gICAgICogU3VwcG9ydHMgdGhlIGZvbGxvd2luZyBjYXNlczpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIGV2ZW50LnRyaWdnZXJDb25kaXRpb24oJ3Rlc3RldmVudCcpO1xyXG4gICAgICogZXZlbnQudHJpZ2dlckNvbmRpdGlvbigndGVzdGV2ZW50JywgWydhc2RmJ10pO1xyXG4gICAgICogZXZlbnQudHJpZ2dlckNvbmRpdGlvbignI3Rlc3QnLCAndGVzdGV2ZW50Jyk7XHJcbiAgICAgKiBldmVudC50cmlnZ2VyQ29uZGl0aW9uKCcjdGVzdCcsICd0ZXN0ZXZlbnQnLCBbJ2FzZGYnXSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAZnVuY3Rpb24gbW9kdWxlOmV2ZW50LnRyaWdnZXJDb25kaXRpb25cclxuICAgICAqIEBhY2Nlc3MgcHVibGljXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0XHJcbiAgICAgKiBAcGFyYW0gZXZlbnRcclxuICAgICAqIEBwYXJhbSBleHRyYVBhcmFtZXRlcnNcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICovXHJcbiAgICB0cmlnZ2VyQ29uZGl0aW9uOiBmdW5jdGlvbiAodGFyZ2V0LCBldmVudCwgZXh0cmFQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgdmFyICR0YXJnZXQ7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAkdGFyZ2V0ID0gdGhpcy5ldmVudHM7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IHRhcmdldDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0YXJnZXQgPSB0aGlzLmV2ZW50cztcclxuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcmFtZXRlcnMgPSBldmVudDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRhcmdldCA9ICQodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgJHRhcmdldCA9ICQodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFldmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZXZlbnRPYmogPSAkLkV2ZW50KGV2ZW50KTtcclxuICAgICAgICAkdGFyZ2V0LnRyaWdnZXIoZXZlbnRPYmopO1xyXG4gICAgICAgIHJldHVybiBldmVudE9iai5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDdXRzIHRoZSBwcmVmaXggaHVtdWIubW9kdWxlcyBvciBtb2R1bGVzLiBmcm9tIHRoZSBnaXZlbiB2YWx1ZS5cclxuICogQHBhcmFtIHt0eXBlfSB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7dW5yZXNvbHZlZH1cclxuICovXHJcbnZhciBfY3V0TW9kdWxlUHJlZml4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gX2N1dFByZWZpeChfY3V0UHJlZml4KHZhbHVlLCAnaHVtaHViLicpLCAnbW9kdWxlcy4nKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDdXRzIGEgcHJlZml4IGZyb20gYSBzdHJpbmcsIHRoaXMgaXMgYWxyZWFkeSBhdmFpbGFibGUgaW4gaHVtaHViLnV0aWwgYnV0XHJcbiAqIHRoaXMgaXMgbm90IGFjY2Vzc2libGUgaGVyZS5cclxuICpcclxuICogQHBhcmFtIHt0eXBlfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge3R5cGV9IHByZWZpeFxyXG4gKiBAcmV0dXJucyB7dW5yZXNvbHZlZH1cclxuICovXHJcbnZhciBfY3V0UHJlZml4ID0gZnVuY3Rpb24gKHZhbHVlLCBwcmVmaXgpIHtcclxuICAgIGlmICghX3N0YXJ0c1dpdGgodmFsdWUsIHByZWZpeCkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgsIHZhbHVlLmxlbmd0aCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIHN0cmF0cyB3aXRoIGEgZ2l2ZW4gcHJlZml4XHJcbiAqIEBwYXJhbSB7dHlwZX0gdmFsXHJcbiAqIEBwYXJhbSB7dHlwZX0gcHJlZml4XHJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gKi9cclxudmFyIF9zdGFydHNXaXRoID0gZnVuY3Rpb24gKHZhbCwgcHJlZml4KSB7XHJcbiAgICBpZiAoIXZhbCB8fCAhcHJlZml4KSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbC5pbmRleE9mKHByZWZpeCkgPT09IDA7XHJcbn07XHJcblxyXG52YXIgX2lzRGVmaW5lZCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiB0eXBlb2Ygb2JqICE9PSAndW5kZWZpbmVkJztcclxufTtcclxuXHJcbnZhciBhZGRNb2R1bGVMb2dnZXIgPSBmdW5jdGlvbiAobW9kdWxlLCBsb2cpIHtcclxuICAgIGxvZyA9IGxvZyB8fCByZXF1aXJlKCdsb2cnKTtcclxuICAgIG1vZHVsZS5sb2cgPSBsb2cubW9kdWxlKG1vZHVsZSk7XHJcbn07XHJcblxyXG4vL0luaXRpYWxpemUgYWxsIGluaXRpYWwgbW9kdWxlc1xyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBsb2cgPSByZXF1aXJlKCdsb2cnKTtcclxuXHJcbiAgICAkLmVhY2gobW9kdWxlQXJyLCBmdW5jdGlvbiAoaSwgbW9kdWxlKSB7XHJcbiAgICAgICAgYWRkTW9kdWxlTG9nZ2VyKG1vZHVsZSwgbG9nKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQuZWFjaChpbml0aWFsTW9kdWxlcywgZnVuY3Rpb24gKGksIG1vZHVsZSkge1xyXG4gICAgICAgIGluaXRNb2R1bGUobW9kdWxlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGh1bWh1Yi5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICBldmVudC50cmlnZ2VyKCdodW1odWI6cmVhZHknKTtcclxuICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ2h1bWh1YjpyZWFkeScsIFtmYWxzZSwgaHVtaHViXSk7XHJcbn0pO1xyXG5cclxudmFyIGluaXRNb2R1bGUgPSBmdW5jdGlvbiAobW9kdWxlKSB7XHJcbiAgICB2YXIgbG9nID0gcmVxdWlyZSgnbG9nJyk7XHJcbiAgICBldmVudC50cmlnZ2VyKCdodW1odWI6YmVmb3JlSW5pdE1vZHVsZScsIG1vZHVsZSk7XHJcbiAgICBpZiAobW9kdWxlLmluaXQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBjb21wYXRpYmlsaXR5IHdpdGggYmV0YSAxLjIgYmV0YSByZWxlYXNlXHJcbiAgICAgICAgICAgIGV2ZW50LnRyaWdnZXIobW9kdWxlLmlkLnJlcGxhY2UoJy4nLCAnOicpICsgJzpiZWZvcmVJbml0JywgbW9kdWxlKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50LnRyaWdnZXIobW9kdWxlLmlkLnJlcGxhY2UoL1xcLi9nLCAnOicpICsgJzpiZWZvcmVJbml0JywgbW9kdWxlKTtcclxuICAgICAgICAgICAgbW9kdWxlLmluaXQoKTtcclxuICAgICAgICAgICAgZXZlbnQudHJpZ2dlcihtb2R1bGUuaWQucmVwbGFjZSgvXFwuL2csICc6JykgKyAnOmFmdGVySW5pdCcsIG1vZHVsZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjb21wYXRpYmlsaXR5IHdpdGggYmV0YSAxLjIgYmV0YSByZWxlYXNlXHJcbiAgICAgICAgICAgIGV2ZW50LnRyaWdnZXIobW9kdWxlLmlkLnJlcGxhY2UoJy4nLCAnOicpICsgJzphZnRlckluaXQnLCBtb2R1bGUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBsb2cuZXJyb3IoJ0NvdWxkIG5vdCBpbml0aWFsaXplIG1vZHVsZTogJyArIG1vZHVsZS5pZCwgZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBldmVudC50cmlnZ2VyKCdodW1odWI6YWZ0ZXJJbml0TW9kdWxlJywgbW9kdWxlKTtcclxuICAgIGxvZy5kZWJ1ZygnTW9kdWxlIGluaXRpYWxpemVkOiAnICsgbW9kdWxlLmlkKTtcclxufTtcclxuXHJcbi8vIFVzZWQgdG8gcHJldmVudCB0aGUgZG91YmxlIGluaXRpYWxpemF0aW9uIG9mIG1vZHVsZXMgbG9hZGVzIGJ5IHBqYXguXHJcbnZhciB1bmxvYWRlZCA9IFtdO1xyXG5cclxuZXZlbnQub24oJ2h1bWh1Yjptb2R1bGVzOmNsaWVudDpwamF4OnN1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAvLyBJbml0IGFsbCBtb2R1bGVzIGFnYWluIHdoaWNoIHdlcmUgdW5sb2FkZWQgaW4gdGhlIGJlZm9yZVNlbmQgYW5kIGFyZSBjb25maWd1cmVkIGZvciBwamF4IGluaXRpYWxpemF0aW9uLlxyXG4gICAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBpbmNsdWRlIG1vZHVsZXMgbG9hZGVkIGJ5IHRoZSBwamF4IHJlcXVlc3QsIHRob3NlIGFyZSBpbml0aWFsaXplZCBpbiB0aGUgbW9kdWxlIGZ1bmN0aW9uLlxyXG4gICAgJC5lYWNoKHBqYXhJbml0TW9kdWxlcywgZnVuY3Rpb24gKGksIG1vZHVsZSkge1xyXG4gICAgICAgIGlmIChtb2R1bGUuaW5pdE9uUGpheExvYWQgJiYgdW5sb2FkZWQuaW5kZXhPZihtb2R1bGUuaWQpID4gLTEpIHtcclxuICAgICAgICAgICAgbW9kdWxlLmluaXQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZXZlbnQudHJpZ2dlcignaHVtaHViOnJlYWR5Jyk7XHJcbiAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdodW1odWI6cmVhZHknLCBbdHJ1ZSwgaHVtaHViXSk7XHJcbn0pLm9uKCdodW1odWI6bW9kdWxlczpjbGllbnQ6cGpheDpiZWZvcmVTZW5kJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgdW5sb2FkZWQgPSBbXTtcclxuICAgICQuZWFjaChtb2R1bGVBcnIsIGZ1bmN0aW9uIChpLCBtb2R1bGUpIHtcclxuICAgICAgICBpZiAobW9kdWxlLnVubG9hZCkge1xyXG4gICAgICAgICAgICBtb2R1bGUudW5sb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVubG9hZGVkLnB1c2gobW9kdWxlLmlkKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbnZhciBwb2x5ZmlsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIG9iamVjdEFzc2lnblBvbHlmaWxsKCk7XHJcbiAgICBhcnJheUluY2x1ZGVzUG9seWZpbGwoKTtcclxufTtcclxuXHJcbnZhciBhcnJheUluY2x1ZGVzUG9seWZpbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5pbmNsdWRlcykge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdpbmNsdWRlcycsIHtcclxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIDEuIExldCBPIGJlID8gVG9PYmplY3QodGhpcyB2YWx1ZSkuXHJcbiAgICAgICAgICAgICAgICB2YXIgbyA9IE9iamVjdCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAyLiBMZXQgbGVuIGJlID8gVG9MZW5ndGgoPyBHZXQoTywgXCJsZW5ndGhcIikpLlxyXG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IG8ubGVuZ3RoID4+PiAwO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIDMuIElmIGxlbiBpcyAwLCByZXR1cm4gZmFsc2UuXHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBuIGJlID8gVG9JbnRlZ2VyKGZyb21JbmRleCkuXHJcbiAgICAgICAgICAgICAgICAvLyAgICAoSWYgZnJvbUluZGV4IGlzIHVuZGVmaW5lZCwgdGhpcyBzdGVwIHByb2R1Y2VzIHRoZSB2YWx1ZSAwLilcclxuICAgICAgICAgICAgICAgIHZhciBuID0gZnJvbUluZGV4IHwgMDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyA1LiBJZiBuIOKJpSAwLCB0aGVuXHJcbiAgICAgICAgICAgICAgICAvLyAgYS4gTGV0IGsgYmUgbi5cclxuICAgICAgICAgICAgICAgIC8vIDYuIEVsc2UgbiA8IDAsXHJcbiAgICAgICAgICAgICAgICAvLyAgYS4gTGV0IGsgYmUgbGVuICsgbi5cclxuICAgICAgICAgICAgICAgIC8vICBiLiBJZiBrIDwgMCwgbGV0IGsgYmUgMC5cclxuICAgICAgICAgICAgICAgIHZhciBrID0gTWF0aC5tYXgobiA+PSAwID8gbiA6IGxlbiAtIE1hdGguYWJzKG4pLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzYW1lVmFsdWVaZXJvKHgsIHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geCA9PT0geSB8fCAodHlwZW9mIHggPT09ICdudW1iZXInICYmIHR5cGVvZiB5ID09PSAnbnVtYmVyJyAmJiBpc05hTih4KSAmJiBpc05hTih5KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gNy4gUmVwZWF0LCB3aGlsZSBrIDwgbGVuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA8IGxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEuIExldCBlbGVtZW50SyBiZSB0aGUgcmVzdWx0IG9mID8gR2V0KE8sICEgVG9TdHJpbmcoaykpLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGIuIElmIFNhbWVWYWx1ZVplcm8oc2VhcmNoRWxlbWVudCwgZWxlbWVudEspIGlzIHRydWUsIHJldHVybiB0cnVlLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYW1lVmFsdWVaZXJvKG9ba10sIHNlYXJjaEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBjLiBJbmNyZWFzZSBrIGJ5IDEuXHJcbiAgICAgICAgICAgICAgICAgICAgaysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIDguIFJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgb2JqZWN0QXNzaWduUG9seWZpbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIE11c3QgYmUgd3JpdGFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCBcImFzc2lnblwiLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCB2YXJBcmdzKSB7IC8vIC5sZW5ndGggb2YgZnVuY3Rpb24gaXMgMlxyXG4gICAgICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7IC8vIFR5cGVFcnJvciBpZiB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFNvdXJjZSAhPSBudWxsKSB7IC8vIFNraXAgb3ZlciBpZiB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHRTb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGJ1Z3Mgd2hlbiBoYXNPd25Qcm9wZXJ0eSBpcyBzaGFkb3dlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXh0U291cmNlLCBuZXh0S2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0bztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxucG9seWZpbGwoKTtcclxuXHJcbmNvbnN0IGh1bWh1YiA9IHtcclxuICAgIG1vZHVsZSxcclxuICAgIG1vZHVsZXMsXHJcbiAgICBjb25maWcsXHJcbiAgICBldmVudCxcclxuICAgIHJlcXVpcmVcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGh1bWh1YjtcclxuIiwiaW1wb3J0IGh1bWh1YiBmcm9tICcuL2NvcmUnO1xyXG5cclxudmFyIG9iamVjdCA9IHtcclxuICAgIGlzRnVuY3Rpb246IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24ob2JqKTtcclxuICAgIH0sXHJcbiAgICBpc09iamVjdDogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuICQuaXNQbGFpbk9iamVjdChvYmopO1xyXG4gICAgfSxcclxuICAgIGlzSlF1ZXJ5OiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0RlZmluZWQob2JqKSAmJiBvYmouanF1ZXJ5O1xyXG4gICAgfSxcclxuICAgIGlzQXJyYXk6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiAkLmlzQXJyYXkob2JqKTtcclxuICAgIH0sXHJcbiAgICBpc0VtcHR5OiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICBpZighb2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYob2JqZWN0LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqLmxlbmd0aCA8PSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICQuaXNFbXB0eU9iamVjdChvYmopO1xyXG4gICAgfSxcclxuICAgIGlzU3RyaW5nOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZyc7XHJcbiAgICB9LFxyXG4gICAgaXNOdW1iZXI6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0RlZmluZWQobikgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xyXG4gICAgfSxcclxuICAgIGlzQm9vbGVhbjogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdib29sZWFuJztcclxuICAgIH0sXHJcbiAgICBkZWZhdWx0VmFsdWU6IGZ1bmN0aW9uKG9iaiwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdC5pc0RlZmluZWQob2JqKSA/IG9iaiA6IGRlZmF1bHRWYWx1ZTtcclxuICAgIH0sXHJcbiAgICByZXNvbHZlOiBmdW5jdGlvbihvYmosIG5zLCBpbml0KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG9iajtcclxuICAgICAgICAkLmVhY2gobnMuc3BsaXQoJy4nKSwgZnVuY3Rpb24oaSwgc3ViUGF0aCkge1xyXG4gICAgICAgICAgICBpZihzdWJQYXRoIGluIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3N1YlBhdGhdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3N1YlBhdGhdID0ge307XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB1bmRlZmluZWQ7IC8vcGF0aCBub3QgZm91bmRcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9sZWF2ZSBlYWNoIGxvb3BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG4gICAgc3dhcDogZnVuY3Rpb24gc3dhcChqc29uKXtcclxuICAgICAgICB2YXIgcmV0ID0ge307XHJcbiAgICAgICAgZm9yKHZhciBrZXkgaW4ganNvbil7XHJcbiAgICAgICAgICAgIHJldFtqc29uW2tleV1dID0ga2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfSxcclxuICAgIGlzRGVmaW5lZDogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZighdGhhdC5pc0RlZmluZWQodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqICE9PSAndW5kZWZpbmVkJztcclxuICAgIH0sXHJcbiAgICBjaGFpbjogZnVuY3Rpb24odGhpc09iaikge1xyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IFtdO1xyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGhhbmRsZXJzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIGhhbmRsZXJzLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzT2JqLCBfYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBkZWJvdW5jZTogZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgdmFyIHRpbWVvdXQ7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGluaGVyaXRzOiBmdW5jdGlvbihTdWIsIFBhcmVudCwgb3B0aW9ucykge1xyXG4gICAgICAgIGZvcih2YXIgaSBpbiBQYXJlbnQpIHtcclxuICAgICAgICAgICAgaWYoIW9wdGlvbnMgfHwgIW9wdGlvbnMuZXhjbHVkZUZpZWxkcyB8fCBvcHRpb25zLmV4Y2x1ZGVGaWVsZHMuaW5kZXhPZihpKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIFN1YltpXSA9IFBhcmVudFtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGFyZW50LnByb3RvdHlwZSk7XHJcbiAgICAgICAgU3ViLl9zdXBlciA9IFBhcmVudC5wcm90b3R5cGU7XHJcbiAgICAgICAgU3ViLl9zdXBlckNvbnN0ID0gUGFyZW50OyAvLyBEZXByZWNhdGVkXHJcblxyXG4gICAgICAgIFN1Yi5wcm90b3R5cGUuc3RhdGljID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGljRmllbGQgPSBTdWJbbmFtZV07XHJcbiAgICAgICAgICAgIGlmKG9iamVjdC5pc0Z1bmN0aW9uKHN0YXRpY0ZpZWxkKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3M7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljRmllbGQuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljRmllbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBTdWIucHJvdG90eXBlLnN1cGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmKCFTdWIuX3N1cGVyW2FyZ3VtZW50c1swXV0pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbCBvZiB1bmRlZmluZWQgbWV0aG9kIG9mIHN1cGVyIHR5cGU6ICcgKyBhcmd1bWVudHNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgYXJncztcclxuXHJcbiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBTdWIuX3N1cGVyW2FyZ3VtZW50c1swXV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBleHRlbmRhYmxlOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGlmKG9iamVjdC5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7aW5pdDpvcHRpb25zfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBleHRlbmRhYmxlQ2xhc3MgPSBvcHRpb25zLmluaXQgfHwgZnVuY3Rpb24oKSB7fTtcclxuXHJcbiAgICAgICAgaWYob3B0aW9ucy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXh0ZW5kYWJsZUNsYXNzLCBcIm5hbWVcIiwgeyB2YWx1ZTogb3B0aW9ucy5uYW1lfSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3Qgb3ZlcndyaXRlIGV4dGVuZGFibGUgbmFtZSBwcm9wZXJ0eScsIGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXh0ZW5kYWJsZUNsYXNzLmV4dGVuZCA9IGZ1bmN0aW9uKGluaXQsIG5hbWUpIHtcclxuICAgICAgICAgICAgaWYob2JqZWN0LmlzU3RyaW5nKGluaXQpKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gaW5pdDtcclxuICAgICAgICAgICAgICAgIGluaXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQgPSBpbml0IHx8IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kYWJsZUNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgU3ViID0gb2JqZWN0LmV4dGVuZGFibGUoe1xyXG4gICAgICAgICAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBvYmplY3QuaW5oZXJpdHMoU3ViLCBleHRlbmRhYmxlQ2xhc3MsIHtleGNsdWRlRmllbGRzOiBbJ2V4dGVuZCddfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gU3ViO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBleHRlbmRhYmxlQ2xhc3M7XHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgZW50aXR5TWFwID0ge1xyXG4gICAgJyYnOiAnJmFtcDsnLFxyXG4gICAgJzwnOiAnJmx0OycsXHJcbiAgICAnPic6ICcmZ3Q7JyxcclxuICAgICdcIic6ICcmcXVvdDsnLFxyXG4gICAgXCInXCI6ICcmIzM5OycsXHJcbiAgICAnLyc6ICcmI3gyRjsnLFxyXG4gICAgJ2AnOiAnJiN4NjA7JyxcclxuICAgICc9JzogJyYjeDNEOydcclxufTtcclxuXHJcbnZhciBzdHJpbmcgPSB7XHJcbiAgICBlc2NhcGVIdG1sOiBmdW5jdGlvbihzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZSgvWyY8PlwiJ2A9XFwvXS9nLCBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHlNYXBbc107XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgY2FwaXRhbGl6ZTogZnVuY3Rpb24oc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcclxuICAgIH0sXHJcbiAgICBjdXRQcmVmaXg6IGZ1bmN0aW9uKHZhbCwgcHJlZml4KSB7XHJcbiAgICAgICAgaWYoIXRoaXMuc3RhcnRzV2l0aCh2YWwsIHByZWZpeCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbC5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCwgdmFsLmxlbmd0aCk7XHJcbiAgICB9LFxyXG4gICAgY3V0U3VmZml4OiBmdW5jdGlvbih2YWwsIHN1ZmZpeCkge1xyXG4gICAgICAgIHJldHVybiB2YWwuc2xpY2UoMCwgc3VmZml4Lmxlbmd0aCAqIC0xKTtcclxuICAgIH0sXHJcbiAgICBzdGFydHNXaXRoOiBmdW5jdGlvbih2YWwsIHByZWZpeCkge1xyXG4gICAgICAgIGlmKCFvYmplY3QuaXNEZWZpbmVkKHZhbCkgfHwgIW9iamVjdC5pc0RlZmluZWQocHJlZml4KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWwuaW5kZXhPZihwcmVmaXgpID09PSAwO1xyXG4gICAgfSxcclxuICAgIGVuZHNXaXRoOiBmdW5jdGlvbih2YWwsIHN1ZmZpeCkge1xyXG4gICAgICAgIGlmKCFvYmplY3QuaXNEZWZpbmVkKHZhbCkgfHwgIW9iamVjdC5pc0RlZmluZWQoc3VmZml4KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWwuaW5kZXhPZihzdWZmaXgsIHZhbC5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyOiBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIocykge1xyXG4gICAgICAgIGlmKCFzIHx8ICFzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcclxuICAgIH0sXHJcbiAgICBsb3dlckNhc2VGaXJzdExldHRlcjogZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHMpIHtcclxuICAgICAgICBpZighcyB8fCAhcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHMuc2xpY2UoMSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qIEBkZXB0ZWNhdGVkIHVzZSBlbmNvZGUgKi9cclxuICAgIGh0bWxFbmNvZGU6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICQoJzxkaXYvPicpLnRleHQodmFsdWUpLmh0bWwoKTtcclxuICAgIH0sXHJcbiAgICBlbmNvZGU6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICQoJzxkaXYvPicpLnRleHQodmFsdWUpLmh0bWwoKTtcclxuICAgIH0sXHJcbiAgICAvKiBAZGVwdGVjYXRlZCB1c2UgZGVjb2RlICovXHJcbiAgICBodG1sRGVjb2RlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiAkKCc8ZGl2Lz4nKS5odG1sKHZhbHVlKS50ZXh0KCk7XHJcbiAgICB9LFxyXG4gICAgZGVjb2RlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiAkKCc8ZGl2Lz4nKS5odG1sKHZhbHVlKS50ZXh0KCk7XHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IGZ1bmN0aW9uKHRtcGwsIGNvbmZpZykge1xyXG4gICAgICAgIHJldHVybiB0bXBsLnJlcGxhY2UoL3soLio/KX0vZywgZnVuY3Rpb24obWF0Y2gsIGNvbnRlbnRzLCBvZmZzZXQsIHMpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0LnJlc29sdmUoY29uZmlnLCBjb250ZW50cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QuaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogbWF0Y2g7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgYXJyYXkgPSB7XHJcbiAgICBtb3ZlOiBmdW5jdGlvbiAoYXJyLCBvbGRfaW5kZXgsIG5ld19pbmRleCkge1xyXG4gICAgICAgIHdoaWxlIChvbGRfaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIG9sZF9pbmRleCArPSBhcnIubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAobmV3X2luZGV4IDwgMCkge1xyXG4gICAgICAgICAgICBuZXdfaW5kZXggKz0gYXJyLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5ld19pbmRleCA+PSBhcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBrID0gbmV3X2luZGV4IC0gYXJyLmxlbmd0aDtcclxuICAgICAgICAgICAgd2hpbGUgKChrLS0pICsgMSkge1xyXG4gICAgICAgICAgICAgICAgYXJyLnB1c2godW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhcnIuc3BsaWNlKG5ld19pbmRleCwgMCwgYXJyLnNwbGljZShvbGRfaW5kZXgsIDEpWzBdKTtcclxuICAgICAgICByZXR1cm4gYXJyOyAvLyBmb3IgdGVzdGluZyBwdXJwb3Nlc1xyXG4gICAgfSxcclxuICAgIHh4eDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3Rlc3QnKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsIG1vZHVsZSB3aXRoIHN1YiBtb2R1bGUgZm9yIG9iamVjdCBhbmQgc3RyaW5nIHV0aWxpdHkgZnVuY3Rpb25zXHJcbiAqL1xyXG5odW1odWIubW9kdWxlKCd1dGlsJywgZnVuY3Rpb24obW9kdWxlKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0KHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvYmplY3Q6IG9iamVjdCxcclxuICAgICAgICBzdHJpbmc6IHN0cmluZyxcclxuICAgICAgICBhcnJheTogYXJyYXksXHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5leHBvcnQge29iamVjdCwgc3RyaW5nLCBhcnJheX07XHJcbiIsImltcG9ydCBodW1odWIgZnJvbSAnLi9jb3JlJztcclxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnO1xyXG5cclxuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgdXRpbC5hcnJheS54eHgoKTtcclxufSwgMzAwMCk7XHJcblxyXG5odW1odWIuZXZlbnQub24oJ2h1bWh1Yjptb2R1bGVzOnV0aWw6YWZ0ZXJJbml0JywgZnVuY3Rpb24oZXZ0LCB1dGlsKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ2FzZGYnKTtcclxuICAgIHV0aWwuYXJyYXkueHh4ID0gKCkgPT4gIGNvbnNvbGUubG9nKCd5ZXMnKTtcclxuXHJcbn0pO1xyXG5cclxuY29uc29sZS5sb2coJ3h4eHh4eHh4Jyk7XHJcblxyXG4vLyBhbiBhcnJheSBvZiBjb2xvcnNcclxubGV0IGNvbG9ycyA9IFsncmVkJywgJ2dyZWVuJywgJ2JsdWUnXTtcclxuXHJcbi8vIGEgZnVuY3Rpb24gdG8gYnVpbGQgYSBsaXN0XHJcbmxldCBtYWtlVGVtcGxhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgbGV0IG5ld0xpc3QgPSAnJztcclxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgbmV3TGlzdCArPSBgPGxpPiR7ZWxlbWVudH08L2xpPmA7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXdMaXN0O1xyXG59O1xyXG5cclxuLy8gYnVpbGQgYSBjb250YWluZXIgdGVtcGxhdGVcclxubGV0IHRlbXBsYXRlID0gYDx1bD5cclxuICAgICAgICAgICAgICAgICR7bWFrZVRlbXBsYXRlKGNvbG9ycyl9XHJcbiAgICAgICAgICAgICAgICA8L3VsPmA7XHJcblxyXG5jb25zb2xlLmxvZyh0ZW1wbGF0ZSk7XHJcblxyXG53aW5kb3cuaHVtaHViID0gaHVtaHViOyJdLCJzb3VyY2VSb290IjoiIn0=